namespace Wacton.Unicolour;

public class Lab : IEquatable<Lab>
{
    public double L { get; }
    public double A { get; }
    public double B { get; }

    public Lab(double l, double a, double b)
    {
        L = l;
        A = a;
        B = b;
    }

    public override string ToString()
    {
        var prefixA = A > 0 ? "+" : string.Empty;
        var prefixB = B > 0 ? "+" : string.Empty;
        return $"{Math.Round(L, 2)} {prefixA}{Math.Round(A, 2)} {prefixB}{Math.Round(B, 2)}";
    }

    // --- autogenerated ---

    public bool Equals(Lab? other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return L.Equals(other.L) && A.Equals(other.A) && B.Equals(other.B);
    }

    public override bool Equals(object? obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != this.GetType()) return false;
        return Equals((Lab) obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = L.GetHashCode();
            hashCode = (hashCode * 397) ^ A.GetHashCode();
            hashCode = (hashCode * 397) ^ B.GetHashCode();
            return hashCode;
        }
    }
}