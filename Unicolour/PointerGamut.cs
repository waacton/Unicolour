namespace Wacton.Unicolour;

internal static class PointerGamut
{
    internal static readonly Lazy<Configuration> Config = new(() => new(xyzConfig: new XyzConfiguration(Illuminant.C, Observer.Degree2)));
    private static readonly Lazy<Dictionary<(double l, double h), double>> Vertices = new(() => new()
    {
        { (15, 0), 10 }, { (20, 0), 30 }, { (25, 0), 43 }, { (30, 0), 56 }, { (35, 0), 68 }, { (40, 0), 77 }, { (45, 0), 79 }, { (50, 0), 77 }, { (55, 0), 72 }, { (60, 0), 65 }, { (65, 0), 57 }, { (70, 0), 50 }, { (75, 0), 40 }, { (80, 0), 30 }, { (85, 0), 19 }, { (90, 0), 8 },
        { (15, 10), 15 }, { (20, 10), 30 }, { (25, 10), 45 }, { (30, 10), 56 }, { (35, 10), 64 }, { (40, 10), 70 }, { (45, 10), 73 }, { (50, 10), 73 }, { (55, 10), 71 }, { (60, 10), 65 }, { (65, 10), 57 }, { (70, 10), 48 }, { (75, 10), 39 }, { (80, 10), 30 }, { (85, 10), 18 }, { (90, 10), 7 },
        { (15, 20), 14 }, { (20, 20), 34 }, { (25, 20), 49 }, { (30, 20), 61 }, { (35, 20), 69 }, { (40, 20), 74 }, { (45, 20), 76 }, { (50, 20), 76 }, { (55, 20), 74 }, { (60, 20), 68 }, { (65, 20), 61 }, { (70, 20), 51 }, { (75, 20), 40 }, { (80, 20), 30 }, { (85, 20), 19 }, { (90, 20), 9 },
        { (15, 30), 35 }, { (20, 30), 48 }, { (25, 30), 59 }, { (30, 30), 68 }, { (35, 30), 75 }, { (40, 30), 82 }, { (45, 30), 84 }, { (50, 30), 83 }, { (55, 30), 80 }, { (60, 30), 75 }, { (65, 30), 67 }, { (70, 30), 56 }, { (75, 30), 45 }, { (80, 30), 33 }, { (85, 30), 21 }, { (90, 30), 10 },
        { (15, 40), 27 }, { (20, 40), 40 }, { (25, 40), 53 }, { (30, 40), 66 }, { (35, 40), 79 }, { (40, 40), 90 }, { (45, 40), 94 }, { (50, 40), 93 }, { (55, 40), 88 }, { (60, 40), 82 }, { (65, 40), 72 }, { (70, 40), 60 }, { (75, 40), 47 }, { (80, 40), 35 }, { (85, 40), 22 }, { (90, 40), 10 },
        { (15, 50), 10 }, { (20, 50), 21 }, { (25, 50), 34 }, { (30, 50), 45 }, { (35, 50), 60 }, { (40, 50), 75 }, { (45, 50), 90 }, { (50, 50), 100 }, { (55, 50), 102 }, { (60, 50), 99 }, { (65, 50), 88 }, { (70, 50), 75 }, { (75, 50), 59 }, { (80, 50), 45 }, { (85, 50), 30 }, { (90, 50), 15 },
        { (15, 60), 4 }, { (20, 60), 15 }, { (25, 60), 26 }, { (30, 60), 37 }, { (35, 60), 48 }, { (40, 60), 59 }, { (45, 60), 70 }, { (50, 60), 82 }, { (55, 60), 93 }, { (60, 60), 103 }, { (65, 60), 106 }, { (70, 60), 98 }, { (75, 60), 85 }, { (80, 60), 66 }, { (85, 60), 45 }, { (90, 60), 23 },
        { (15, 70), 5 }, { (20, 70), 15 }, { (25, 70), 25 }, { (30, 70), 36 }, { (35, 70), 46 }, { (40, 70), 56 }, { (45, 70), 67 }, { (50, 70), 76 }, { (55, 70), 85 }, { (60, 70), 94 }, { (65, 70), 102 }, { (70, 70), 108 }, { (75, 70), 103 }, { (80, 70), 82 }, { (85, 70), 58 }, { (90, 70), 34 },
        { (15, 80), 6 }, { (20, 80), 15 }, { (25, 80), 24 }, { (30, 80), 32 }, { (35, 80), 40 }, { (40, 80), 48 }, { (45, 80), 55 }, { (50, 80), 64 }, { (55, 80), 72 }, { (60, 80), 82 }, { (65, 80), 94 }, { (70, 80), 105 }, { (75, 80), 115 }, { (80, 80), 115 }, { (85, 80), 83 }, { (90, 80), 48 },
        { (15, 90), 4 }, { (20, 90), 12 }, { (25, 90), 20 }, { (30, 90), 28 }, { (35, 90), 36 }, { (40, 90), 44 }, { (45, 90), 53 }, { (50, 90), 60 }, { (55, 90), 68 }, { (60, 90), 75 }, { (65, 90), 83 }, { (70, 90), 90 }, { (75, 90), 98 }, { (80, 90), 106 }, { (85, 90), 111 }, { (90, 90), 90 },
        { (15, 100), 9 }, { (20, 100), 16 }, { (25, 100), 23 }, { (30, 100), 30 }, { (35, 100), 37 }, { (40, 100), 45 }, { (45, 100), 51 }, { (50, 100), 58 }, { (55, 100), 65 }, { (60, 100), 72 }, { (65, 100), 80 }, { (70, 100), 86 }, { (75, 100), 94 }, { (80, 100), 100 }, { (85, 100), 106 }, { (90, 100), 108 },
        { (15, 110), 9 }, { (20, 110), 18 }, { (25, 110), 27 }, { (30, 110), 35 }, { (35, 110), 44 }, { (40, 110), 52 }, { (45, 110), 59 }, { (50, 110), 66 }, { (55, 110), 74 }, { (60, 110), 82 }, { (65, 110), 87 }, { (70, 110), 92 }, { (75, 110), 95 }, { (80, 110), 100 }, { (85, 110), 96 }, { (90, 110), 84 },
        { (15, 120), 4 }, { (20, 120), 14 }, { (25, 120), 23 }, { (30, 120), 32 }, { (35, 120), 41 }, { (40, 120), 49 }, { (45, 120), 57 }, { (50, 120), 64 }, { (55, 120), 71 }, { (60, 120), 78 }, { (65, 120), 84 }, { (70, 120), 90 }, { (75, 120), 94 }, { (80, 120), 95 }, { (85, 120), 83 }, { (90, 120), 50 },
        { (15, 130), 5 }, { (20, 130), 18 }, { (25, 130), 30 }, { (30, 130), 40 }, { (35, 130), 48 }, { (40, 130), 56 }, { (45, 130), 64 }, { (50, 130), 70 }, { (55, 130), 77 }, { (60, 130), 82 }, { (65, 130), 85 }, { (70, 130), 88 }, { (75, 130), 89 }, { (80, 130), 84 }, { (85, 130), 64 }, { (90, 130), 35 },
        { (15, 140), 7 }, { (20, 140), 20 }, { (25, 140), 32 }, { (30, 140), 42 }, { (35, 140), 52 }, { (40, 140), 60 }, { (45, 140), 69 }, { (50, 140), 76 }, { (55, 140), 82 }, { (60, 140), 87 }, { (65, 140), 89 }, { (70, 140), 90 }, { (75, 140), 83 }, { (80, 140), 71 }, { (85, 140), 54 }, { (90, 140), 30 },
        { (15, 150), 7 }, { (20, 150), 21 }, { (25, 150), 34 }, { (30, 150), 45 }, { (35, 150), 57 }, { (40, 150), 68 }, { (45, 150), 75 }, { (50, 150), 81 }, { (55, 150), 84 }, { (60, 150), 84 }, { (65, 150), 83 }, { (70, 150), 80 }, { (75, 150), 72 }, { (80, 150), 58 }, { (85, 150), 44 }, { (90, 150), 20 },
        { (15, 160), 8 }, { (20, 160), 24 }, { (25, 160), 36 }, { (30, 160), 48 }, { (35, 160), 58 }, { (40, 160), 68 }, { (45, 160), 76 }, { (50, 160), 82 }, { (55, 160), 85 }, { (60, 160), 83 }, { (65, 160), 78 }, { (70, 160), 69 }, { (75, 160), 59 }, { (80, 160), 49 }, { (85, 160), 34 }, { (90, 160), 15 },
        { (15, 170), 13 }, { (20, 170), 25 }, { (25, 170), 36 }, { (30, 170), 47 }, { (35, 170), 57 }, { (40, 170), 65 }, { (45, 170), 70 }, { (50, 170), 75 }, { (55, 170), 76 }, { (60, 170), 75 }, { (65, 170), 71 }, { (70, 170), 65 }, { (75, 170), 57 }, { (80, 170), 45 }, { (85, 170), 30 }, { (90, 170), 15 },
        { (15, 180), 10 }, { (20, 180), 25 }, { (25, 180), 38 }, { (30, 180), 48 }, { (35, 180), 57 }, { (40, 180), 64 }, { (45, 180), 69 }, { (50, 180), 71 }, { (55, 180), 72 }, { (60, 180), 69 }, { (65, 180), 64 }, { (70, 180), 60 }, { (75, 180), 51 }, { (80, 180), 41 }, { (85, 180), 29 }, { (90, 180), 16 },
        { (15, 190), 7 }, { (20, 190), 19 }, { (25, 190), 30 }, { (30, 190), 40 }, { (35, 190), 48 }, { (40, 190), 55 }, { (45, 190), 59 }, { (50, 190), 62 }, { (55, 190), 62 }, { (60, 190), 60 }, { (65, 190), 55 }, { (70, 190), 49 }, { (75, 190), 41 }, { (80, 190), 32 }, { (85, 190), 23 }, { (90, 190), 13 },
        { (15, 200), 5 }, { (20, 200), 19 }, { (25, 200), 29 }, { (30, 200), 37 }, { (35, 200), 42 }, { (40, 200), 45 }, { (45, 200), 46 }, { (50, 200), 46 }, { (55, 200), 45 }, { (60, 200), 43 }, { (65, 200), 39 }, { (70, 200), 35 }, { (75, 200), 30 }, { (80, 200), 22 }, { (85, 200), 14 }, { (90, 200), 7 },
        { (15, 210), 0 }, { (20, 210), 12 }, { (25, 210), 17 }, { (30, 210), 26 }, { (35, 210), 34 }, { (40, 210), 43 }, { (45, 210), 49 }, { (50, 210), 51 }, { (55, 210), 54 }, { (60, 210), 50 }, { (65, 210), 46 }, { (70, 210), 40 }, { (75, 210), 32 }, { (80, 210), 24 }, { (85, 210), 14 }, { (90, 210), 4 },
        { (15, 220), 2 }, { (20, 220), 12 }, { (25, 220), 20 }, { (30, 220), 28 }, { (35, 220), 35 }, { (40, 220), 40 }, { (45, 220), 45 }, { (50, 220), 48 }, { (55, 220), 51 }, { (60, 220), 49 }, { (65, 220), 45 }, { (70, 220), 38 }, { (75, 220), 32 }, { (80, 220), 23 }, { (85, 220), 15 }, { (90, 220), 6 },
        { (15, 230), 10 }, { (20, 230), 20 }, { (25, 230), 29 }, { (30, 230), 36 }, { (35, 230), 42 }, { (40, 230), 46 }, { (45, 230), 49 }, { (50, 230), 51 }, { (55, 230), 52 }, { (60, 230), 50 }, { (65, 230), 45 }, { (70, 230), 39 }, { (75, 230), 32 }, { (80, 230), 24 }, { (85, 230), 15 }, { (90, 230), 7 },
        { (15, 240), 8 }, { (20, 240), 16 }, { (25, 240), 26 }, { (30, 240), 34 }, { (35, 240), 41 }, { (40, 240), 47 }, { (45, 240), 49 }, { (50, 240), 50 }, { (55, 240), 50 }, { (60, 240), 47 }, { (65, 240), 42 }, { (70, 240), 36 }, { (75, 240), 29 }, { (80, 240), 21 }, { (85, 240), 12 }, { (90, 240), 4 },
        { (15, 250), 9 }, { (20, 250), 21 }, { (25, 250), 32 }, { (30, 250), 40 }, { (35, 250), 49 }, { (40, 250), 54 }, { (45, 250), 55 }, { (50, 250), 55 }, { (55, 250), 52 }, { (60, 250), 48 }, { (65, 250), 43 }, { (70, 250), 36 }, { (75, 250), 29 }, { (80, 250), 21 }, { (85, 250), 13 }, { (90, 250), 4 },
        { (15, 260), 12 }, { (20, 260), 24 }, { (25, 260), 34 }, { (30, 260), 41 }, { (35, 260), 46 }, { (40, 260), 51 }, { (45, 260), 55 }, { (50, 260), 56 }, { (55, 260), 51 }, { (60, 260), 46 }, { (65, 260), 40 }, { (70, 260), 33 }, { (75, 260), 27 }, { (80, 260), 20 }, { (85, 260), 13 }, { (90, 260), 6 },
        { (15, 270), 14 }, { (20, 270), 31 }, { (25, 270), 42 }, { (30, 270), 50 }, { (35, 270), 55 }, { (40, 270), 60 }, { (45, 270), 60 }, { (50, 270), 57 }, { (55, 270), 50 }, { (60, 270), 45 }, { (65, 270), 39 }, { (70, 270), 33 }, { (75, 270), 26 }, { (80, 270), 20 }, { (85, 270), 13 }, { (90, 270), 6 },
        { (15, 280), 10 }, { (20, 280), 29 }, { (25, 280), 45 }, { (30, 280), 55 }, { (35, 280), 60 }, { (40, 280), 61 }, { (45, 280), 60 }, { (50, 280), 57 }, { (55, 280), 53 }, { (60, 280), 46 }, { (65, 280), 40 }, { (70, 280), 34 }, { (75, 280), 25 }, { (80, 280), 18 }, { (85, 280), 11 }, { (90, 280), 4 },
        { (15, 290), 20 }, { (20, 290), 40 }, { (25, 290), 60 }, { (30, 290), 69 }, { (35, 290), 71 }, { (40, 290), 69 }, { (45, 290), 65 }, { (50, 290), 58 }, { (55, 290), 50 }, { (60, 290), 43 }, { (65, 290), 36 }, { (70, 290), 29 }, { (75, 290), 24 }, { (80, 290), 18 }, { (85, 290), 12 }, { (90, 290), 5 },
        { (15, 300), 30 }, { (20, 300), 55 }, { (25, 300), 72 }, { (30, 300), 81 }, { (35, 300), 79 }, { (40, 300), 72 }, { (45, 300), 64 }, { (50, 300), 57 }, { (55, 300), 50 }, { (60, 300), 42 }, { (65, 300), 35 }, { (70, 300), 30 }, { (75, 300), 24 }, { (80, 300), 17 }, { (85, 300), 12 }, { (90, 300), 5 },
        { (15, 310), 62 }, { (20, 310), 76 }, { (25, 310), 85 }, { (30, 310), 88 }, { (35, 310), 85 }, { (40, 310), 80 }, { (45, 310), 71 }, { (50, 310), 62 }, { (55, 310), 55 }, { (60, 310), 47 }, { (65, 310), 41 }, { (70, 310), 34 }, { (75, 310), 27 }, { (80, 310), 20 }, { (85, 310), 14 }, { (90, 310), 6 },
        { (15, 320), 60 }, { (20, 320), 71 }, { (25, 320), 79 }, { (30, 320), 84 }, { (35, 320), 85 }, { (40, 320), 86 }, { (45, 320), 82 }, { (50, 320), 74 }, { (55, 320), 66 }, { (60, 320), 57 }, { (65, 320), 48 }, { (70, 320), 40 }, { (75, 320), 31 }, { (80, 320), 24 }, { (85, 320), 16 }, { (90, 320), 8 },
        { (15, 330), 20 }, { (20, 330), 50 }, { (25, 330), 72 }, { (30, 330), 86 }, { (35, 330), 89 }, { (40, 330), 89 }, { (45, 330), 86 }, { (50, 330), 80 }, { (55, 330), 72 }, { (60, 330), 63 }, { (65, 330), 54 }, { (70, 330), 45 }, { (75, 330), 36 }, { (80, 330), 27 }, { (85, 330), 18 }, { (90, 330), 9 },
        { (15, 340), 26 }, { (20, 340), 49 }, { (25, 340), 63 }, { (30, 340), 73 }, { (35, 340), 82 }, { (40, 340), 87 }, { (45, 340), 87 }, { (50, 340), 83 }, { (55, 340), 78 }, { (60, 340), 71 }, { (65, 340), 62 }, { (70, 340), 51 }, { (75, 340), 40 }, { (80, 340), 28 }, { (85, 340), 18 }, { (90, 340), 4 },
        { (15, 350), 15 }, { (20, 350), 37 }, { (25, 350), 52 }, { (30, 350), 65 }, { (35, 350), 73 }, { (40, 350), 79 }, { (45, 350), 82 }, { (50, 350), 84 }, { (55, 350), 79 }, { (60, 350), 73 }, { (65, 350), 63 }, { (70, 350), 53 }, { (75, 350), 40 }, { (80, 350), 30 }, { (85, 350), 17 }, { (90, 350), 6 },
        { (15, 360), 10 }, { (20, 360), 30 }, { (25, 360), 43 }, { (30, 360), 56 }, { (35, 360), 68 }, { (40, 360), 77 }, { (45, 360), 79 }, { (50, 360), 77 }, { (55, 360), 72 }, { (60, 360), 65 }, { (65, 360), 57 }, { (70, 360), 50 }, { (75, 360), 40 }, { (80, 360), 30 }, { (85, 360), 19 }, { (90, 360), 8 }
    });

    // could use these to more succinctly define the chroma values as a 2D array, but for now I like the explicitness of the Vertices dictionary
    private const double MinL = 15;
    private const double MaxL = 90;
    private const int DeltaL = 5;
    private const int DeltaH = 10;
    
    internal static bool IsInGamut(Unicolour colour)
    {
        if (colour.Lchab.UseAsNaN) return false;
        
        var config = Config.Value;
        if (colour.Configuration.Xyz.Illuminant != config.Xyz.Illuminant 
            || colour.Configuration.Xyz.Observer != config.Xyz.Observer)
        {
            colour = colour.ConvertToConfiguration(config);
        }
        
        var (l, c, h) = colour.Lchab.ConstrainedTriplet;
        
        if (l is < MinL or > MaxL) return false; // no data for lightness outwith this range
        if (colour.Lchab.UseAsGreyscale) return true; // there is no chroma and hue is powerless; C == 0 and L is in range therefore within gamut
        
        var maxC = GetMaxC(l, h);
        return c <= maxC;
    }

    // potentially able to reuse CLUT, but it's tailored to ICC profile workflow
    // and normalising data would add extra complexity and overhead
    // while needing to make CLUT generic enough to handle cyclical hue and non-square grid points
    internal static double GetMaxC(double l, double h)
    {
        l = l.Clamp(MinL, MaxL);
        
        var vertices = Vertices.Value;
        
        var ls = vertices.Keys.Select(x => x.l).Distinct().OrderBy(x => x).ToList();
        var nextL = ls.First(x => x >= l);
        var prevL = ls.Last(x => x <= l);
        var lDistance = (l - prevL) / DeltaL;

        var hs = vertices.Keys.Select(x => x.h).Distinct().OrderBy(x => x).ToList();
        var nextH = hs.First(x => x >= h);
        var prevH = hs.Last(x => x <= h);
        var hDistance = (h - prevH) / DeltaH;
        
        var c00 = vertices[(prevL, prevH)];
        var c01 = vertices[(prevL, nextH)];
        var c10 = vertices[(nextL, prevH)];
        var c11 = vertices[(nextL, nextH)];

        var c0 = Interpolation.Interpolate(c00, c01, hDistance);
        var c1 = Interpolation.Interpolate(c10, c11, hDistance);
        return Interpolation.Interpolate(c0, c1, lDistance);
    }
}