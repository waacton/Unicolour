<div class="column gap-small">
    <div class="colour-space-row">
        <select class="colour-space-select monospace" @onchange="SetColourSpace" title="Colour space selector">
            @foreach (var colourSpaceOption in ColourSpaceOptions)
            {
                <option value="@colourSpaceOption" selected="@(colourSpaceOption == colourSpace)">@colourSpaceOption</option>
            }
        </select>
    </div>

    @* these could be componentised but event callbacks and state management is too much hassle for an example *@
    @foreach (var slider in sliders)
    {
        <div class="slider-wrapper">
            <input class="slider-gradient @(slider.InRange ? "show-thumb" : "hide-thumb")"
                   style="background-image: linear-gradient(to right, @slider.CssGradient), linear-gradient(to right, @slider.CssAlphaGradient), var(--dark-stripes)"
                   type="range" min="@slider.Min" max="@slider.Max" step="@slider.Step" value="@slider.Value" @oninput="args => SetSliderValue(slider, args)"
                   title="Slider @(slider.AxisText)">
            <label class="slider-value-text monospace text-on-dark">@slider.ValueText</label>
            <label class="slider-axis-text monospace text-on-dark">@slider.AxisText</label>
        </div>
    }
</div>

@* 
 most styles are defined in global app.css
 the css here is for elements that are specific to this page
 e.g. colour space selection component (the actual colour sliders will be used in different pages in future, so are global)
*@
<style>
    .colour-space-row {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
        gap: 1rem;
        width: 100%;
    }
    
    .colour-space-select {
        flex: 0 0 33%;
    }
    
    @@media screen and (max-width: 720px) {
        .colour-space-select {
            flex: 0 0 50%;
        }
    }
</style>